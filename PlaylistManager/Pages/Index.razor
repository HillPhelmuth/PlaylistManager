@page "/"
@using PlaylistManager.Models
@using PlaylistManager.Data
@using PlaylistManager.Controllers
@using System.Diagnostics;
@using Microsoft.AspNetCore.Http;
@using System.Security.Claims;
@using System.IO
@using PlaylistManager.Extentions
@inject IJSRuntime JSRuntime
@inject PlaylistService PlaylistService
@inject PlaylistLiteDbService Database
@inject ExcelController ExcelService
@inject IHttpContextAccessor HttpContextAccessor

<div class="" style="width:9rem; padding:.7rem">
    @*<p>Timer: @elapsedTime</p>*@
    Current playlist
    <h3>        
        @if (SelectedPlaylist != null)
        {
            @SelectedPlaylist.Name
        }
    </h3>
</div>
<div class="text-center">
    
    @if (pageReady)
    {
        <button class="btn btn-primary" @onclick=@(() => ChangePlaylist())>Change playlist</button>
    }
    else
    {
        <h2>Sign in to create or add to playlists</h2>
    }
</div>

<div class="container">
    <div class="row" style="width:60em">
        @if (showPlaylists)
        {
            @if (pageReady)
            {
                <div class="col" style="width:22rem; flex:none; border-radius:35px; border:5px solid #0094ff;
        padding:15px; height:auto;">

                    <h6>Select Playlist</h6>
                    <select class="form-control" @bind="playlistName">
                        <option value=""></option>
                        @foreach (var playlist in UserPlaylists)
                        {
                            <option value="@playlist.Name">@playlist.Name</option>
                        }
                    </select>
                    <button class="btn btn-primary" @onclick=@(() => SelectPlaylist(playlistName))>Select playlist</button>

                </div>
                <div class="col text-center" style="width:12rem; flex:none; border-radius:35px; border:5px solid #0094ff;
        padding:15px; height:auto; margin-left:5rem">
                    <button class="btn btn-primary" @onclick="ToggleNewPlaylist">Add new Playlist</button>

                </div>
            }
            @if (togglePlaylist)
            {

                <div class="col" style="width:22rem; flex:none; border-radius:35px; border:5px solid #0094ff;
        padding:10px; height:auto;">
                    <h6>Add new Playlist</h6>
                    <MatTextField @bind-Value="newPlaylist" Label="Add new Playlist"></MatTextField>
                    <button class="btn btn-primary" @onclick=@(() => AddNewPlaylist(newPlaylist))>Add playlist</button>
                </div>
                <div class="col" style="width:22rem; flex:none; border-radius:35px; border:5px solid #0094ff;
        padding:10px; height:auto;">
                    <h5>Upload Playlist from Excel file</h5>
                    <MatFileUpload OnChange="@ReadExcelFile"></MatFileUpload>

                </div>
            }
        }
    </div>
</div>
@if (SelectedPlaylist != null)
{
    <div class="content text-center">
        <CascadingValue Value="SelectedPlaylist">
            <TabControl>
                <TabPage Text="Search for videos">
                    <SearchResults />
                </TabPage>
                <TabPage Text="Watch Videos from Playlist">
                    <Playlists VideosChanged=@UpdateVideosList />
                </TabPage>
                <TabPage Text="Delete Videos from playlist">
                    <DeleteVideos />
                </TabPage>
            </TabControl>
        </CascadingValue>
    </div>
}
@code{
    [Parameter]
    public List<PlaylistModel> UserPlaylists { get; set; }
    [Parameter]
    public PlaylistModel SelectedPlaylist { get; set; }
    [Parameter]
    public List<VideoModel> PlaylistVideos { get; set; }
    private string playlistName;
    public string newPlaylist { get; set; }
    public List<string> PlaylistNames { get; set; }
    private bool pageReady;
    private bool togglePlaylist = false;
    private bool showPlaylists = false;
    private TimeSpan elapsedTime = new TimeSpan(0, 0, 0);
    private bool stopwatchRunning = false;
    private long elapsedMinutes;
    public string stopwatchTime;
    private Stopwatch clock;
    private string userId => HttpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
    protected override async Task OnInitializedAsync()
    {

        pageReady = false;
        UserPlaylists = await Database.GetUserPlaylists();
        if (Database.HasUser)
        {
            pageReady = true;
            showPlaylists = true;
        }
        //StopWatch();
    }
    //protected async Task StopWatch()
    //{
    //    stopwatchRunning = true;
    //    while(stopwatchRunning)
    //    {

    //        if (stopwatchRunning)
    //        {
    //            elapsedTime = elapsedTime.Add( new TimeSpan(0, 0, 1));
    //            await Task.Delay(1000);
    //            StateHasChanged();
    //        }
    //    }

    //}

    private async Task AddNewPlaylist(string playlistName)
    {
        PlaylistModel playlist = new PlaylistModel() { Name = playlistName, User_ID = userId };
        await Task.Run(() => Database.AddPlaylist(playlistName));
        UserPlaylists.Add(playlist);
        SelectedPlaylist = await Database.GetPlaylistWithKey(playlist);
        showPlaylists = false;
    }
    private void SelectPlaylist(string playlist)
    {
        SelectedPlaylist = UserPlaylists.Where(x => x.Name == playlistName).FirstOrDefault();
        showPlaylists = false;
    }
    public void UpdateVideosList(List<VideoModel> videos)
    {
        PlaylistVideos = videos;
        var debugvideos = PlaylistVideos;
        //StateHasChanged();
    }
    private async Task ChangePlaylist()
    {
        SelectedPlaylist = null;
        newPlaylist = null;
        UserPlaylists = await Database.GetUserPlaylists();
        showPlaylists = true;
    }
    private void ToggleNewPlaylist()
    {
        togglePlaylist = !togglePlaylist;
    }
    async Task ReadExcelFile(IMatFileUploadEntry[] files)
    {

        var file = files.FirstOrDefault();
        if (file == null)
            return;
        var filename = file.Name;
        var playlistName = filename.Substring(0, filename.IndexOf("-"));
        await AddNewPlaylist(playlistName);


        var videos = await ExcelService.Import(file);
        if (SelectedPlaylist == null)
        {

            return;
        }
        foreach (var video in videos)
        {
            await Database.AddVideoToPlaylist(video, SelectedPlaylist);
        }



    }

}