@using MatBlazor
@using PlaylistManager.Models
@using PlaylistManager.Extentions
@inject IJSRuntime JSRuntime




<div id="makePlayer" class="text-center" style="width:30em; margin-left:10em">
    <div id="player">

    </div>
</div>
<div>
    <button class="btn btn-primary" @onclick="OkClick">Close Player</button>
</div>



@code {
    [CascadingParameter]
    public List<VideoModel> VideoUrls { get; set; }
    [CascadingParameter]
    public bool videosReady { get; set; }
    [Parameter]
    public EventCallback<bool> videosReadyChanged { get; set; }
    private List<VideoModel> PrivateVideos { get; set; }
    private string videoId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        PrivateVideos = VideoUrls;
        var refThis = DotNetObjectReference.Create(this);
        var firstVideo = PrivateVideos.OrderBy(x => x.PreferenceID).FirstOrDefault();
        videoId = firstVideo.VideoID;
        PrivateVideos.Remove(firstVideo);        
        await JSRuntime.StartYouTube();
        await Task.Delay(1000);
        await JSRuntime.InvokeAsync<object>("getYouTube", refThis, videoId);        
    }
    protected async Task OkClick()
    {
        videosReady = false;        
        await JSRuntime.StopYouTubePlayer();
        await Task.Delay(3000);        
        await JSRuntime.AddYouTubePlayer();
    }
    [JSInvokable]
    public async Task GetNextVideo()
    {        
        await JSRuntime.StopYouTubePlayer();
        
        await JSRuntime.StartYouTube();
        var refThis = DotNetObjectReference.Create(this);
        var firstVideo = PrivateVideos.OrderBy(x => x.PreferenceID).FirstOrDefault();
        videoId = firstVideo.VideoID;
        PrivateVideos.Remove(firstVideo);
        var debugvids = PrivateVideos;
        
        await JSRuntime.AddYouTubePlayer();
        await Task.Delay(1000);
        await JSRuntime.InvokeAsync<object>("getYouTube", refThis, videoId);        
    }
}
