@using PlaylistManager.Models
@using PlaylistManager.Data
@using PlaylistManager.Extentions
@using PlaylistManager.Controllers
@inject IJSRuntime JSRuntime
@inject PlaylistDatabaseService Database
@inject ExcelController ExcelService
@inject NavigationManager NavigationManager
<h3>Set your playlist order</h3>

<div>
    @if (videosReady)
    {
        <CascadingValue Value="videosReady">
            <CascadingValue Value="VideoUrls">
                <VideoPlayer />
            </CascadingValue>
        </CascadingValue>
    }
    @if (pageReady)
    {
        <div class="text-center">
            <button class="btn btn-primary" @onclick="PlayVideosInOrder">Play Videos</button>
            <button class="btn btn-secondary" @onclick="ExportVideosExcel">Download</button>
            <ul class="list-group list-group-flush" style="line-height:1.6em">
                <Dropzone>
                    @foreach (var video in Videos)
                    {

                        <div>
                            <Draggable>
                                <li class="list-group-item mat-elevation-z22" style="border-radius:3em; margin-left:5em; margin-right:5em; margin-bottom:.2em">
                                    <span style="font-size:1.4em; margin-right:.8em" class="oi oi-elevator"></span>
                                    <span style="font-size:1.4em"> @video.Title</span>
                                    <span style="font-weight:800; margin-left:.5em">PlayOrder: @context.OrderPosition </span>
                                    @{video.PreferenceID = context.OrderPosition;}
                                </li>
                            </Draggable>
                        </div>

                    }
                </Dropzone>
            </ul>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public PlaylistModel PlaylistName { get; set; }

    public List<VideoModel> Videos { get; set; }
    [Parameter]
    public EventCallback<List<VideoModel>> VideosChanged { get; set; }
    [Parameter]
    public List<VideoModel> VideoUrls { get; set; }
    private List<VideoModel> OrderedVideos = new List<VideoModel>();
    [Parameter]
    public bool videosReady { get; set; } = false;
    private bool pageReady = false;
    protected override async Task OnInitializedAsync()
    {
        Videos = await Database.GetPlaylistVideos(PlaylistName);
        pageReady = true;
    }
    public async Task PlayVideosInOrder()
    {
        OrderedVideos = Videos.OrderBy(x => x.PreferenceID).ToList();
        var videoIds = OrderedVideos.Select(x => x.VideoID).ToArray();
        //OrderedVideos.RemoveAt(0);
        await JSRuntime.InvokeAsync<object>("startYouTube");
        VideoUrls = OrderedVideos;
        foreach (var video in VideoUrls)
        {
            await Database.UpdatePlaylistVideos(video, PlaylistName);
        }
        videosReady = true;
    }
    private async Task ExportVideosExcel()
    {
        var baseUri = NavigationManager.BaseUri;
        var excelBytes = await ExcelService.ExportV2(PlaylistName);
        //await ExcelService.Export(SelectedPlaylist, baseUri);
        await JSRuntime.SaveAs($"{PlaylistName.Name}-{PlaylistName.ID}.xlsx", excelBytes);
    }
}