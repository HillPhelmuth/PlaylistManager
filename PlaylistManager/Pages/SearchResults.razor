@using PlaylistManager.Models
@using PlaylistManager.Data
@inject PlaylistService PlaylistService
@inject PlaylistDatabaseService Database

<h3>Search YouTube</h3>

<div class="text-center">
    <input type="text" @bind="SearchYouTube" />
    <button class="btn btn-primary" @onclick="GetVideoResults">Search</button>
</div>
<div>
    @if (playReady)
    {
        <CascadingValue Value="VideoUrl">
            <VideoPlayer />
        </CascadingValue>
    }
</div>
<div class="row">
    @if (videosReady)
    {
        <span><button class="btn btn-primary" @onclick="AddVideosToDatabase">Add</button><br /></span>
        <div class="col" style="width:32em">
            <div class="card-columns-two" style="width:42em; height:auto">
                @foreach (var video in Videos)
                {
                    <div class="card mat-elevation-z24" style="height:auto; width:16em; flex:none; border-radius:.5em; border:.2em solid #000000; padding:1px; justify-content:center; margin:.3em">
                        <MatTooltip Tooltip="@video.Description" Wrap="true">
                            <p>@video.Title <img src="@video.ThumbnailUrl" /></p>
                        </MatTooltip>
                        @{string videoID = video.VideoID;}
                        <button class="btn btn-primary" @onclick=@(() => PlayVideo(videoID))>Play video</button>
                        <button class="btn btn-primary" @onclick=@(() => AddVideoToPlaylist(video))>Add to Playlist</button>
                    </div>

                }
            </div>
        </div>
    }
    @if (hasAdded)
    {
        <div class="col">
            <div>

            </div><br />
            @foreach (var video in VideosAdded)
            {
                <div class="card" style="height:auto; width:14em; flex:none; border-radius:.5em; border:.2em solid #000000; padding:1px; justify-content:center; margin:.3em">
                    <p>@video.Title <img style="float:left" src="@video.ThumbnailUrl" /></p>
                    <button class="btn btn-primary" @onclick=@(() =>RemoveFromPlaylist(video))>Remove</button>
                </div>
            }
        </div>
    }
</div>

@code{
    [Parameter]
    public List<VideoModel> VideoUrl { get; set; }
    [CascadingParameter]
    public PlaylistModel Playlist { get; set; }
    public string SearchYouTube { get; set; }

    public List<VideoModel> Videos { get; set; }
    public List<VideoModel> VideosAdded = new List<VideoModel>();
    private bool videosReady = false;
    private bool playReady = false;
    private bool hasAdded = false;
    public async Task GetVideoResults()
    {
        Videos = await PlaylistService.GetYouTubeVideos(SearchYouTube);
        videosReady = true;
    }
    public async Task PlayVideo(string videoID)
    {
        VideoUrl = new List<VideoModel>();
        var vid = Videos.Where(x => x.VideoID == videoID).FirstOrDefault();
        await Task.Run(() => VideoUrl.Add(vid));
        //var video = await Task.FromResult(videoID);        
        playReady = true;
    }
    public async Task AddVideoToPlaylist(VideoModel video)
    {
        await Task.Run(() => Database.AddVideoToPlaylist(video, Playlist));
        await Task.Run(() => VideosAdded.Add(video));
        hasAdded = true;
    }
    public async Task RemoveFromPlaylist(VideoModel video)
    {
        await Task.Run(() => Database.RemoveVideoFromPlaylist(video));
        await Task.Run(() => VideosAdded.Remove(video));
        if (VideosAdded.Count == 0)
            hasAdded = false;
    }
    public async Task AddVideosToDatabase()
    {
        foreach (var video in VideosAdded)
        {
            await Task.Run(() => Database.AddVideoToPlaylist(video, Playlist));
            VideosAdded.Clear();
            hasAdded = false;
        }
    }
}
